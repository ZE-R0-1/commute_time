import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:kakao_map_plugin/kakao_map_plugin.dart';
import 'location_search_controller.dart';
import 'search_result_screen.dart';
import 'search_result_controller.dart';

class LocationSearchScreen extends GetView<LocationSearchController> {
  const LocationSearchScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final TextEditingController searchTextController = TextEditingController();

    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Get.back(),
        ),
        title: Obx(() => Text(
          controller.title.value,
          style: const TextStyle(
            color: Colors.black,
            fontSize: 18,
            fontWeight: FontWeight.w600,
          ),
        )),
        centerTitle: true,
      ),
      body: Stack(
        children: [
          // Ïπ¥Ïπ¥Ïò§Îßµ ÏòÅÏó≠ (Ï†ÑÏ≤¥ ÌôîÎ©¥)
          _buildMapSection(),
          
          // ÏÉÅÎã® Í≤ÄÏÉâÏ∞ΩÍ≥º Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞
          Positioned(
            top: 16,
            left: 16,
            right: 16,
            child: _buildSearchSection(searchTextController),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchSection(TextEditingController searchController) {
    return Column(
      children: [
        // Í≤ÄÏÉâÏ∞Ω (ÌÑ∞Ïπò Ï†ÑÏö© - Ïπ¥Ïπ¥Ïò§Îßµ Ïä§ÌÉÄÏùº)
        GestureDetector(
          onTap: _openSearchScreen,
          child: Container(
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(8),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withValues(alpha: 0.1),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
              child: Row(
                children: [
                  const Icon(
                    Icons.search,
                    color: Colors.grey,
                    size: 22,
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text(
                      'Ï£ºÏÜå, Í±¥Î¨ºÎ™Ö, Ïû•ÏÜåÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
                      style: TextStyle(
                        color: Colors.grey[500],
                        fontSize: 15,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
        
        const SizedBox(height: 12),
        
        // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞ (Ïπ¥Ïπ¥Ïò§Îßµ Ïä§ÌÉÄÏùº)
        Row(
          children: [
            Obx(() => _buildKakaoCategoryButton(
              'ÏßÄÌïòÏ≤†Ïó≠',
              0,
              controller.selectedCategory.value,
              Icons.train,
              Colors.blue,
            )),
            const SizedBox(width: 8),
            Obx(() => _buildKakaoCategoryButton(
              'Î≤ÑÏä§Ï†ïÎ•òÏû•',
              1,
              controller.selectedCategory.value,
              Icons.directions_bus,
              Colors.green,
            )),
          ],
        ),
      ],
    );
  }

  Widget _buildKakaoCategoryButton(String title, int index, int selectedIndex, IconData icon, Color color) {
    bool isSelected = index == selectedIndex;
    
    return GestureDetector(
      onTap: () => controller.changeCategory(index),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
          color: isSelected ? color : Colors.white,
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: isSelected ? color : Colors.grey[300]!,
            width: 1,
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withValues(alpha: 0.08),
              blurRadius: 4,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 20,
              height: 20,
              decoration: BoxDecoration(
                color: isSelected ? Colors.white : color.withValues(alpha: 0.1),
                shape: BoxShape.circle,
              ),
              child: Icon(
                icon,
                size: 12,
                color: isSelected ? color : color,
              ),
            ),
            const SizedBox(width: 6),
            Text(
              title,
              style: TextStyle(
                fontSize: 13,
                fontWeight: FontWeight.w500,
                color: isSelected ? Colors.white : Colors.black87,
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _openSearchScreen() async {
    try {
      // SearchResultControllerÎ•º Îì±Î°ù (Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎ©¥ Ïû¨ÏÇ¨Ïö©)
      if (!Get.isRegistered<SearchResultController>()) {
        Get.put(SearchResultController());
      }
      
      // Í≤ÄÏÉâ ÌôîÎ©¥ÏúºÎ°ú Ïù¥ÎèôÌïòÍ≥† Í≤∞Í≥º ÎåÄÍ∏∞
      final result = await Get.to(() => const SearchResultScreen());
      
      // Í≤∞Í≥ºÍ∞Ä ÏûàÏúºÎ©¥ Ï≤òÎ¶¨
      if (result != null && result is Map<String, dynamic>) {
        _handleSearchResult(result);
      }
    } catch (e) {
      print('‚ùå Í≤ÄÏÉâ ÌôîÎ©¥ Ïò§Î•ò: $e');
    } finally {
      // SearchResultController Ï†ïÎ¶¨ (ÏïàÏ†ÑÌïòÍ≤å)
      try {
        if (Get.isRegistered<SearchResultController>()) {
          Get.delete<SearchResultController>();
        }
      } catch (e) {
        print('‚ùå Ïª®Ìä∏Î°§Îü¨ Ï†ïÎ¶¨ Ïò§Î•ò: $e');
      }
    }
  }

  void _handleSearchResult(Map<String, dynamic> result) {
    // ÏßÄÎèÑ Ï§ëÏã¨ÏùÑ ÏÑ†ÌÉùÎêú ÏúÑÏπòÎ°ú Ïù¥Îèô
    final latitude = result['latitude'] as double?;
    final longitude = result['longitude'] as double?;
    
    if (latitude != null && longitude != null && controller.mapController != null) {
      controller.mapController!.setCenter(LatLng(latitude, longitude));
      print('üìç ÏÑ†ÌÉùÎêú ÏúÑÏπòÎ°ú ÏßÄÎèÑ Ïù¥Îèô: (${latitude}, ${longitude})');
      print('üè∑Ô∏è ÏÑ†ÌÉùÎêú Ïû•ÏÜå: ${result['title']}');
    }
  }

  Widget _buildMapSection() {
    return Stack(
      children: [
        KakaoMap(
          key: const ValueKey('location_search_map'), // Í≥†Ïú† ÌÇ§ Ï∂îÍ∞Ä
          onMapCreated: controller.onMapCreated,
          center: LatLng(37.4980, 127.0276), // Í∞ïÎÇ®Ïó≠ Ï§ëÏã¨
          minLevel: 3,
          maxLevel: 3,
          markers: controller.markers,
          onMarkerTap: controller.onMarkerTap, // ÎßàÏª§ ÌÉ≠ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
          onDragChangeCallback: controller.onDragChange, // ÎìúÎûòÍ∑∏ Í∞êÏßÄ Ï∂îÍ∞Ä
        ),
        
        // 'Ïù¥ ÏúÑÏπò Ïû¨Í≤ÄÏÉâ' Î≤ÑÌäº (Í≤ÄÏÉâÏ∞Ω ÏïÑÎûòÏ™Ω)
        Obx(() => controller.showResearchButton.value
          ? Positioned(
              top: 140, // Í≤ÄÏÉâÏ∞ΩÍ≥º Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤ÑÌäº ÏïÑÎûòÏ™ΩÏúºÎ°ú Ïù¥Îèô
              left: 0,
              right: 0,
              child: Center(
                child: GestureDetector(
                  onTap: controller.onResearchButtonTap,
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                    decoration: BoxDecoration(
                      color: Colors.blue,
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withValues(alpha: 0.2),
                          blurRadius: 8,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: const Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          Icons.refresh,
                          color: Colors.white,
                          size: 18,
                        ),
                        SizedBox(width: 6),
                        Text(
                          'Ïù¥ ÏúÑÏπò Ïû¨Í≤ÄÏÉâ',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 14,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            )
          : const SizedBox.shrink(),
        ),
      ],
    );
  }

}